/*
 *					 DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE
 *									 Version 2, December 2004
 *
 *					 DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE
 *	TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION
 *
 *	0. You just DO WHAT THE FUCK YOU WANT TO.
 *********************************************************************/

#ifndef _IOCOLOR_H
#define _IOCOLOR_H

#include <iostream>
#include <Windows.h>
#include <stdint.h>

namespace std
{
	static
	bool
	is_tty (HANDLE fd)
	{
		return (fd == (HANDLE)STD_OUTPUT_HANDLE ||
			fd == (HANDLE)STD_ERROR_HANDLE);
	}

	static
	bool
	is_tty (std::ostream& s)
	{
		if (s == std::cout) {
			return true;
		}
		else if (s == std::cerr) {
			return true;
		}
		else {
			return false;
		}
	}

	class console {
		class _init {
		public:
			_init () {
				::std::console::stdout_handle = GetStdHandle(STD_OUTPUT_HANDLE);
				::std::console::stderr_handle = GetStdHandle(STD_ERROR_HANDLE);

				CONSOLE_SCREEN_BUFFER_INFO csbi;
				GetConsoleScreenBufferInfo(::std::console::stdout_handle, &csbi);
				::std::console::stdout_defaults = csbi.wAttributes;
				GetConsoleScreenBufferInfo(::std::console::stderr_handle, &csbi);
				::std::console::stderr_defaults = csbi.wAttributes;
			}
		};

		static HANDLE stdout_handle;
		static HANDLE stderr_handle;
		static WORD stdout_defaults;
		static WORD stderr_defaults;
		static _init _initializer;

	public:
		static
		HANDLE
		get_handle (std::ostream& s) {
			if (s == std::cout) {
				return stdout_handle;
			}
			else if (s == std::cerr) {
				return stderr_handle;
			}
			else {
				return NULL;
			}
		}

		static
		WORD
		get_defaults (std::ostream& s) {
			return get_defaults(get_handle(s));
		}

		static
		WORD
		get_defaults (HANDLE h) {
			if (h == stdout_handle) {
				return stdout_defaults;
			}
			else if (h == stderr_handle) {
				return stderr_defaults;
			}
			else {
				return 0;
			}
		}
	};

	struct color_definition
	{
		short	 foreground;
		short	 background;
		uint8_t effects;
	};

	enum color
	{
		black,
		red,
		green,
		yellow,
		blue,
		magenta,
		cyan,
		white,

		none	= -1,
		reset = -2
	};

	enum class effect : uint8_t
	{
		none = 0,

		bold			= 1, // 1
		underline = 2, // 4
		blink		 = 4, // 5
		standout	= 8	// 7
	};

	inline // constexpr
	effect
	operator | (effect a, effect b)
	{
		return static_cast<effect>(static_cast<uint8_t>(a) | static_cast<uint8_t>(b));
	}

	inline
	color_definition
	color (enum color fg, enum color bg = color::none, effect ef = effect::none)
	{
		color_definition res = { static_cast<short>(fg),
						 static_cast<short>(bg),
						 static_cast<uint8_t>(ef) };
		return res;
	}

	inline
	color_definition
	color (short fg, short bg = -1, uint8_t ef = 0)
	{
		color_definition res = { fg, bg, ef };
		return res;
	}

	inline
	color_definition
	foreground (enum color fg)
	{
		return color(fg);
	}

	inline
	color_definition
	foreground (short fg)
	{
		return color(fg);
	}

	inline
	color_definition
	background (enum color bg)
	{
		return color(color::none, bg);
	}

	inline
	color_definition
	background (short bg)
	{
		return color(-1, bg);
	}

	inline
	color_definition
	effects (effect ef)
	{
		return color(color::none, color::none, ef);
	}

	inline
	color_definition
	effects (uint8_t ef)
	{
		return color(-1, -1, ef);
	}
}

HANDLE std::console::stdout_handle;
HANDLE std::console::stderr_handle;
WORD std::console::stdout_defaults;
WORD std::console::stderr_defaults;
std::console::_init std::console::_initializer;

static
std::ostream&
operator << (std::ostream& o, std::color_definition descriptor)
{
	if (!is_tty(o)) {
		return o;
	}

	HANDLE hT = std::console::get_handle(o);
	WORD wAttributes;
	{
		CONSOLE_SCREEN_BUFFER_INFO csbi;
		GetConsoleScreenBufferInfo(hT, &csbi);
		wAttributes = csbi.wAttributes;
	}
	WORD _wAttributes = wAttributes;

	if (descriptor.effects != 0) {
		if (descriptor.effects & static_cast<uint8_t>(std::effect::bold)) {
			wAttributes |= FOREGROUND_INTENSITY;
		}

		if (descriptor.effects & static_cast<uint8_t>(std::effect::underline)) {
			wAttributes |= COMMON_LVB_UNDERSCORE;
		}

		if (descriptor.effects & static_cast<uint8_t>(std::effect::blink)) {
			wAttributes |= BACKGROUND_INTENSITY;
		}

		if (descriptor.effects & static_cast<uint8_t>(std::effect::standout)) {
			wAttributes |= COMMON_LVB_REVERSE_VIDEO;
		}
	}

	if (descriptor.foreground != -1) {
		if (descriptor.foreground < 8) {
			wAttributes &= 0xfff8;
			switch (descriptor.foreground)
			{
			case 1:
				wAttributes |= FOREGROUND_RED;
			break;
			case 2:
				wAttributes |= FOREGROUND_GREEN;
			break;
			case 3:
				wAttributes |= 0x0006;
			break;
			case 4:
				wAttributes |= FOREGROUND_BLUE;
			break;
			case 5:
				wAttributes |= 0x0005;
			break;
			case 6:
				wAttributes |= 0x0003;
			break;
			case 7:
				wAttributes |= 0x0007;
			break;
			}
		}
	}

	if (descriptor.background != -1) {
		if (descriptor.background < 8) {
			wAttributes &= 0xff8f;
			switch (descriptor.background)
			{
			case 1:
				wAttributes |= BACKGROUND_RED;
			break;
			case 2:
				wAttributes |= BACKGROUND_GREEN;
			break;
			case 3:
				wAttributes |= 0x0060;
			break;
			case 4:
				wAttributes |= BACKGROUND_BLUE;
			break;
			case 5:
				wAttributes |= 0x0050;
			break;
			case 6:
				wAttributes |= 0x0030;
			break;
			case 7:
				wAttributes |= 0x0070;
			break;
			}
		}
	}

	SetConsoleTextAttribute(hT, wAttributes);

	return o;
}

static
std::ostream&
operator << (std::ostream& o, enum std::color c)
{
	if (!is_tty(o)) {
		return o;
	}

	if (c == std::color::reset) {
		HANDLE hT = std::console::get_handle(o);
		SetConsoleTextAttribute(hT, std::console::get_defaults(hT));
	}
	else {
		o << std::foreground(c);
	}

	return o;
}

static
std::ostream&
operator << (std::ostream& o, std::effect ef)
{
	if (!is_tty(o)) {
		return o;
	}

	if (ef == std::effect::none) {
		HANDLE hT = std::console::get_handle(o);
		SetConsoleTextAttribute(hT, std::console::get_defaults(hT));
	}
	else {
		o << std::effects(ef);
	}

	return o;
}

#endif
